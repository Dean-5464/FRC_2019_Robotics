/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;


import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;



/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends IterativeRobot {
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();

//Line Sensors
 AnalogInput LeftSensor = new AnalogInput(0);
 AnalogInput MiddleSensor = new AnalogInput(1);
 AnalogInput RightSensor = new AnalogInput(2);

 //Controller / Joystick(s)
 Joystick stick = new Joystick(0); 

 //Drive Motors
 WPI_TalonSRX LeftMotor = new WPI_TalonSRX(1);
 WPI_TalonSRX RightMotor = new WPI_TalonSRX(2);

//Acuator Motors
 WPI_TalonSRX LiftMotor = new WPI_TalonSRX(0);
 WPI_TalonSRX AngleMotor = new WPI_TalonSRX(3);

//Encoders
 Encoder LeftEncoder = new Encoder(8, 9);
 Encoder RightEncoder = new Encoder(7, 6);
 Encoder LiftEncoder = new Encoder(4, 5);
 Encoder AngleEncoder = new Encoder(2, 3);

//Servos
 Servo AngleServo = new Servo(0);
 Servo LiftServo = new Servo(1);

//Drive
 DifferentialDrive drive = new DifferentialDrive(LeftMotor, RightMotor); 

//Average Sensor Values
 double Left_Value;
 double Right_Value;
 double Middle_Value;

//Array Vaulues And Array
 int Largest_Sensor;
 int Array_Number = -1;
 double Largest_Sensor_Value;
// double Max_Array [] = new double[1];

//Raw Sensor Voltages
 double Left_Voltage;
 double Mid_Voltage;
 double Right_Voltage;

 //Debug Variables
  double Left_Max_Voltage = 0.0;
  double Middle_Max_Voltage = 0.0;
  double Right_Max_Voltage = 0.0;
  double Left_Min_Voltage = 9.0;
  double Mid_Min_Voltage = 9.0;
  double Right_Min_Voltage = 9.0;

  //Booleans
 boolean LSensor;
 boolean MSensor;
 boolean RSensor;
 boolean Drive_Mode;



  

  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {



    m_chooser.setDefaultOption("Default Auto", kDefaultAuto);
    m_chooser.addOption("My Auto", kCustomAuto);
    SmartDashboard.putData("Auto choices", m_chooser);



  }

  /**
   * This function is called every robot packet, no matter the mode. Use
   * this for items like diagnostics that you want ran during disabled,
   * autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before
   * LiveWindow and SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {
    
    SmartDashboard.putNumber("Left Sensor", LeftSensor.getAverageVoltage());
    SmartDashboard.putNumber("Middle Sensor", MiddleSensor.getAverageVoltage());
    SmartDashboard.putNumber("Right Sensor", RightSensor.getAverageVoltage());

    //debug variables
    SmartDashboard.putNumber("Right Max", Right_Max_Voltage);
    SmartDashboard.putNumber("Middle Max", Middle_Max_Voltage);
    SmartDashboard.putNumber("Left Max", Left_Max_Voltage);
    SmartDashboard.putNumber("Right Min", Right_Min_Voltage);
    SmartDashboard.putNumber("Middle Min", Mid_Min_Voltage);
    SmartDashboard.putNumber("Left_Min", Left_Min_Voltage);
    SmartDashboard.putNumber("Largest Sensor", Largest_Sensor);

  }

  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the dashboard. The sendable
   * chooser code works with the Java SmartDashboard. If you prefer the
   * LabVIEW Dashboard, remove all of the chooser code and uncomment the
   * getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to
   * the switch structure below with additional strings. If using the
   * SendableChooser make sure to add them to the chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();
    // autoSelected = SmartDashboard.getString("Auto Selector",
    // defaultAuto);
    System.out.println("Auto selected: " + m_autoSelected);
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
      case kCustomAuto:
        // Put custom auto code here
        break;
      case kDefaultAuto:
      default:
        // Put default auto code here
        break;
    }    
  }

  /**
   * This function is called periodically during operator control.
   */
  @Override
  public void teleopPeriodic() {
/*
    Max_Array[0] = Left_Value;
    Max_Array[1] = Mid_Value;
    Max_Array[2] = Right_Value;

    // drive.tankDrive(stick.getRawAxis(3), stick.getRawAxis(1));
  if(Array_Number == -1){
    Largest_Sensor_Value = Max_Array[0];
    Array_Number++;

  }else if(Array_Number < 2 && Array_Number != -1){

    if(Largest_Sensor_Value < Max_Array[Array_Number]){
    Largest_Sensor_Value = Max_Array[Array_Number];
    }

    Array_Number++;
  }else{
  Largest_Sensor = Array_Number - 1;
  Array_Number = 0;
  }
*/

    if(stick.getRawButton(1) == true){
      LiftMotor.set(1.0);
    } else if(stick.getRawButton(2) == true){
      LiftMotor.set(-1.0);
    } else{
      LiftMotor.set(0.0);
    }

    if(stick.getRawButton(3) == true){
      AngleMotor.set(1.0);
    // }else if(stick.getRawButton(4) == true){
    //   AngleMotor.set(-1.0);
    }else{
      AngleMotor.set(0.0);
    }

    if(stick.getRawButton(5) == true){
      LiftServo.set(0.5);
    }else if(stick.getRawButton(6) == true){
      LiftServo.set(-0.5);
    }
    

    //Virtual "Shifters" Test
    if(stick.getRawButton(10) == true){
      Drive_Mode = true;
    }else if(stick.getRawButton(11) == true){
      Drive_Mode = false;
    }

    if(Drive_Mode == true){
      drive.tankDrive(stick.getRawAxis(3) * 0.6, stick.getRawAxis(1) * 0.6);
    }else{
    drive.tankDrive(stick.getRawAxis(3), stick.getRawAxis(1));
  }
    //End of Vitual shifters

    if(Left_Sensor_Value(Left_Value, LeftSensor.getAverageVoltage()) >= 0.75){
      LSensor = true;
    }else{
      LSensor = false;

    }
    if(Middle_Sensor_Value(Middle_Value, MiddleSensor.getAverageVoltage()) >= 0.75){
      MSensor = true;
    }else{
      MSensor = false;

    }
    if(Right_Sensor_Value(Right_Value, RightSensor.getAverageVoltage()) >= 0.75){
      RSensor = true;
    }else{
      RSensor = false;
    }

    
if(stick.getRawButton(4) == true){
    if(LSensor && !MSensor && !RSensor){

      // hard left
      SmartDashboard.putString("Direction", "Hard Left");
      drive.tankDrive(-0.75, -0.5);

    }else if(LSensor && MSensor && !RSensor){

      // easy left
      SmartDashboard.putString("Direction", "Easy Left");
      drive.tankDrive(-0.4, -0.65);

    }else if(!LSensor && MSensor && !RSensor){

      // drive forward
      SmartDashboard.putString("Direction", "Drive Forward");
      drive.tankDrive(-0.75, -0.75);

    }else if(!LSensor && MSensor && RSensor){
      
      // easy right
      SmartDashboard.putString("Direction", "Easy Right");
      drive.tankDrive(-0.65, -0.4);

    }else if(!LSensor && !MSensor && RSensor){

      // hard right
      SmartDashboard.putString("Direction", "Hard Right");
      drive.tankDrive(-0.5, -0.75);
      
    }else{
      
      //error
      SmartDashboard.putString("Direction", "ERROR");
      drive.tankDrive(stick.getRawAxis(3), stick.getRawAxis(1));

    }
  }


SmartDashboard.putBoolean("Left Sensor", LSensor);
SmartDashboard.putBoolean("Middle Sensor", MSensor);
SmartDashboard.putBoolean("Right Sensor", RSensor);
SmartDashboard.updateValues();




  }

  /**
   * This function is called periodically during test mode.
   */
  @Override
  public void testPeriodic() {

  

    if(LeftSensor.getAverageVoltage() > Left_Max_Voltage){
      Left_Max_Voltage = LeftSensor.getAverageVoltage();
    }

    if(MiddleSensor.getAverageVoltage() > Middle_Max_Voltage){
      Middle_Max_Voltage = MiddleSensor.getAverageVoltage();
    }

    if(RightSensor.getAverageVoltage() > Right_Max_Voltage){
      Right_Max_Voltage = RightSensor.getAverageVoltage();
    }

    if(LeftSensor.getAverageVoltage() < Left_Min_Voltage){
      Left_Min_Voltage = LeftSensor.getAverageVoltage();
    }

    if(MiddleSensor.getAverageVoltage() < Mid_Min_Voltage){
      Mid_Min_Voltage = MiddleSensor.getAverageVoltage();
    }

    if(RightSensor.getAverageVoltage() < Right_Min_Voltage){
      Right_Min_Voltage = RightSensor.getAverageVoltage();
    }

  }

public double Left_Sensor_Value(double Left_Value, double Left_Voltage){
  //Left Sensor Max / Min Values
  double Max = 1.99;
  double Min = 0.57;

  Left_Value = ((Left_Voltage - Min) / (Max - Min)); 
  
    return Left_Value;
  }

public double Middle_Sensor_Value(double Middle_Value, double Mid_Voltage){
  //Middle Sensor Max / Min Values
double Max = 2.07;
double Min = 0.60;

Middle_Value = ((Mid_Voltage - Min) / (Min - Max));

  return Middle_Value;
}

public double Right_Sensor_Value(double Right_Value, double Right_Voltage){

  //Right Sensor Max / Min Values
double Max = 1.39;
double Min = 0.38;

 Right_Value = ((Right_Voltage - Min) / (Min - Max));  

  return Right_Value;
  }
}
